package com.example.mycloset.ui.home;

import android.Manifest;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.storage.StorageManager;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentResultListener;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.Navigation;
import androidx.navigation.fragment.FragmentNavigator;
import androidx.transition.Slide;
import androidx.transition.TransitionManager;

import com.example.mycloset.OutfitsFragmentActivity;
import com.example.mycloset.R;
import com.example.mycloset.data.AppDatabase;
import com.example.mycloset.data.daos.GarmentDao;
import com.example.mycloset.data.daos.OutfitDao;
import com.example.mycloset.data.entities.Event;
import com.example.mycloset.data.entities.Garment;
import com.example.mycloset.data.entities.Outfit;
import com.example.mycloset.databinding.FragmentHomeBinding;
import com.example.mycloset.ui.closet.ClosetFragment;
import com.example.mycloset.ui.closet.OutfitsFragment;
import com.example.mycloset.ui.overview.ClothesGridFragment;
import com.example.mycloset.utils.FragmentUtils;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;

import java.io.IOException;
import java.util.UUID;

public class HomeFragment extends Fragment {

    private FragmentHomeBinding binding;

    private Outfit outfitNow;

    private boolean canShowAccounts;
    private int timesEntered = 0;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        getParentFragmentManager().setFragmentResultListener("OUTFIT_ID_SELECTED", this, new FragmentResultListener() {
            @Override
            public void onFragmentResult(@NonNull String requestKey, @NonNull Bundle result) {
                long idSelected = result.getLong("OUTFIT_ID_SELECTED");

                // Access to the DB to get the garment selected
                AppDatabase db = AppDatabase.get(getContext());
                OutfitDao outfitDao = db.outfitDao();

                ListenableFuture<Outfit> listListenableFuture = outfitDao.selectById(idSelected);
                Futures.addCallback(
                        listListenableFuture,
                        new FutureCallback<Outfit>() {
                            public void onSuccess(Outfit result) {
                                // handle success
                                outfitNow = result;
                                new Thread(new Runnable() {
                                    @Override
                                    public void run() {
//                                        registerOutfit(db);
                                    }
                                }).start();
                            }
                            public void onFailure(@NonNull Throwable thrown) {
                                // handle failure
                            }
                        },
                        // causes the callbacks to be executed on the main (UI) thread
                        getContext().getMainExecutor()
                );
            }
        });
    }

    private void registerOutfit(long outfitId) {
        // Access to the DB to get the garment selected
        AppDatabase db = AppDatabase.get(getContext());
        OutfitDao outfitDao = db.outfitDao();

        ListenableFuture<Outfit> listListenableFuture = outfitDao.selectById(outfitId);
        Futures.addCallback(
                listListenableFuture,
                new FutureCallback<Outfit>() {
                    public void onSuccess(Outfit result) {
                        // handle success
                        outfitNow = result;
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                Event event = new Event();
                                event.isAutogenerated = true;
                                event.outfitWornId = outfitNow.outfitId;
                                db.eventDao().insertAll(event);

                            }
                        }).start();
                        Toast.makeText(getContext(), getString(R.string.outfit_registered), Toast.LENGTH_SHORT).show();
                    }

                    public void onFailure(@NonNull Throwable thrown) {
                        // handle failure
                    }
                },
                // causes the callbacks to be executed on the main (UI) thread
                getContext().getMainExecutor()
        );
    }

    @Override
    public void onResume() {
        super.onResume();
        if (timesEntered++ < 2) {
            SharedPreferences sharedPreferences = getActivity().getSharedPreferences("MY_PREFERENCES", Context.MODE_PRIVATE);
            binding.textViewGreetings.setText( getString(R.string.greetings) + sharedPreferences.getString("USERNAME", "... I don't know your name :("));
        }
    }

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        HomeViewModel homeViewModel =
                new ViewModelProvider(this).get(HomeViewModel.class);

        binding = FragmentHomeBinding.inflate(inflater, container, false);
        View root = binding.getRoot();

        SharedPreferences sharedPreferences = getActivity().getSharedPreferences("MY_PREFERENCES", Context.MODE_PRIVATE);
        binding.textViewGreetings.setText("Hello, " + sharedPreferences.getString("USERNAME", "... I don't know your name :("));

//        SharedPreferences sharedPreferences = getActivity().getSharedPreferences("MY_PREFERENCES", Context.MODE_PRIVATE);
//        binding.textViewGreetings.setText("Hello, " + sharedPreferences.getString("USERNAME", "... I don't know your name :("));

        binding.buttonRegisterOutfit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                changeFragment(view);
            }
        });



//        final TextView textView = binding.textHome;
//        homeViewModel.getText().observe(getViewLifecycleOwner(), textView::setText);
        return root;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 1 && resultCode == Activity.RESULT_OK) {
            long outfitId = data.getLongExtra("OUTFIT_ID_SELECT", 0);
            registerOutfit(outfitId);
        }
    }

    private void changeFragment(View view){
        startActivityForResult(new Intent(getActivity(), OutfitsFragmentActivity.class), 1);
//        startActivity(new Intent(getActivity(), OutfitsFragmentActivity.class));
//        Navigation.findNavController(binding.getRoot()).navigate(R.id.fabClothes);
//        new Activity().startActivity(new Fragment());
//        FragmentUtils.replaceFragment(this, ClosetFragment.class); // OutfitsFragment.newInstance("SELECT")
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

//        binding.textHome.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                dispatchTakePictureIntent();
//            }
//        });

//        StorageManager storageManager = getContext().
//                getApplicationContext().getSystemService(StorageManager.class);
//        UUID appSpecificInternalDirUuid = null;
//        try {
//            appSpecificInternalDirUuid = storageManager.getUuidForPath(getContext().getExternalFilesDir(null));
//            @SuppressLint("WrongThread") long availableBytes =
//                    storageManager.getAllocatableBytes(appSpecificInternalDirUuid) / 1024L / 1024L / 1024L;
//            binding.textView6.setText(availableBytes+" GB");
//        } catch (IOException e) {
//            throw new RuntimeException(e);
//        }


//        binding.textView4.setText(getContext().getExternalFilesDir(null).toString());


//        canShowAccounts = (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.GET_ACCOUNTS) == PackageManager.PERMISSION_GRANTED);
//        ActivityResultLauncher<String> requestPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
//            if (isGranted) {
//                canShowAccounts = true;
//            }
//            else {
//                canShowAccounts = false;
//                binding.textView4.setText("No hay permisos :(");
//            }
//        });
//
//        if (!canShowAccounts)
//        {
//            requestPermissionLauncher.launch(Manifest.permission.GET_ACCOUNTS);
//        }
//        else{
//            showAccounts();
//        }



    }

//    private void showAccounts(){
//        AccountManager accountManager = AccountManager.get(getContext());
//        Account[] accounts = accountManager.getAccountsByType("com.google");
//        String s = "";
//        for(Account a: accounts) {
//            s += a.toString() + "\n";
//        }
//        binding.textView4.setText(accounts.length + "");
//    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    static final int REQUEST_IMAGE_CAPTURE = 1;

    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        try {
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
        } catch (ActivityNotFoundException e) {
            // display error state to the user
        }
    }
}